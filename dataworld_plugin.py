# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DataWorldPlugin
                                 A QGIS plugin
 Load data from dataworld.com
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-12-01
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Sergio Costa
        email                : sergio.costa@ufma.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QComboBox, QCheckBox,QLineEdit, QTableWidgetItem

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .dataworld_plugin_dialog import DataWorldPluginDialog
import os.path

import os

plugin_dir = os.path.dirname(__file__)

try:
    import pip
except:
    exec(open(os.path.join(plugin_dir, "get_pip.py")).read())
    import pip
    # just in case the included version is old
    pip.main(['install','--upgrade','pip'])

try:
    import datadotworld as dw
except:
    pip.main(['install', 'datadotworld[pandas]'])



s = '''
PREFIX amz: <http://purl.org/ontology/dbcells/amazon#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX dbco: <http://purl.org/ontology/dbcells/cells#>
PREFIX qb: <http://purl.org/linked-data/cube/>
PREFIX lc: <http://purl.org/landchange/amazon/>
PREFIX dbce: <http://www.dbcells.org/epsg4326/>
PREFIX amz: <http://purl.org/ontology/dbcells/amazon> 
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

SELECT ?obs ?wkt ?agric ?forest ?uriCell
where {
    ?obs a qb:Observation.
    ?obs amz:agric ?agric.
    ?obs amz:veg ?forest.
    ?obs sdmx:refArea ?uriCell.
    SERVICE <https://dbcells-staging.herokuapp.com/cells> {
        ?uriCell geo:asWKT ?wkt.
    }
}
limit 25

'''


class DataWorldPlugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DataWorldPlugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&DataWorld Plugin')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        
        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('DataWorldPlugin', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool
self.dlg.buttonBox.accepted.connect(self.saveFile)
        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/dataworld_plugin/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'DataWorld'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&DataWorld Plugin'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = DataWorldPluginDialog()

        
        self.dlg.button_box.accepted.connect(self.execute)
        self.dlg.buttonToken.clicked.connect(self.set_token)
        self.dlg.buttonSPARQL.clicked.connect(self.fill_table)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def execute (self):
        ds = dw.query('landchangedata/novoprojeto', s, query_type='sparql')
        table = ds.dataframe
        print (table)


    def fill_table(self):
        print (s)
        tokens = s.replace('\n', ' ').upper().split(" ")
        tokens = list(filter(lambda x: x != '', tokens))
        print (tokens)
        start = tokens.index('SELECT') + 1
        end = tokens.index('WHERE') 
        attributes = tokens[start:end] #identificar os atributos
        attributes = list(map (lambda x: x[1:], attributes))
        print (attributes)
        
        self.dlg.tableAttributes.setRowCount(len(attributes))
        self.dlg.tableAttributes.setColumnCount(5)
        self.dlg.tableAttributes.setHorizontalHeaderLabels(["Import?", "IDColumn?", "GeoColumn?", "Variable", "Attribute name"])

        start = 0
        for attr in attributes:
            self.dlg.tableAttributes.setCellWidget(start, 0, QCheckBox())
            self.dlg.tableAttributes.setCellWidget(start, 1, QCheckBox())
            self.dlg.tableAttributes.setCellWidget(start, 2, QCheckBox())
            self.dlg.tableAttributes.setItem(start, 3, QTableWidgetItem(attr))
            self.dlg.tableAttributes.setCellWidget(start, 4, QLineEdit(attr))
            start += 1

    def set_token(self):
        os.environ['DW_AUTH_TOKEN'] = self.dlg.lineToken.text()